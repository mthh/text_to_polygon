# -*- coding: utf-8 -*-

"""
/***************************************************************************
 TextToPolygon
                                 A QGIS plugin
 This plugin converts text into vector geometries (polygons)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-23
        copyright            : (C) 2025 by Matthieu Viry
        email                : matthieu.viry@cnrs.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Matthieu Viry'
__date__ = '2025-04-23'
__copyright__ = '(C) 2025 by Matthieu Viry'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterString,
                       QgsProcessingParameterNumber,
                       QgsGeometry,
                       QgsFeature,
                       QgsFields,
                       QgsWkbTypes,
                       QgsVectorLayer,
                       QgsProject,
                       QgsPointXY)
from qgis.PyQt.QtGui import (
    QFont,
    QFontDatabase,
    QPainterPath,
)

class TextToPolygonAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    font_families = QFontDatabase().families()

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    INPUT_TEXT = 'INPUT_TEXT'
    FONT = 'FONT'
    TEXT_SIZE = 'TEXT_SIZE'
    OUTPUT = 'OUTPUT'

    def __init__(self, iface):
        QgsProcessingAlgorithm.__init__(self)
        self.iface = iface

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """


        self.addParameter(
            QgsProcessingParameterString(
                self.INPUT_TEXT,
                self.tr('Text to convert to polygons'),
                'Some text'
            )
        )

        self.addParameter(
            QgsProcessingParameterEnum(
                self.FONT,
                self.tr('Font'),
                self.font_families,
                False,
                0,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.TEXT_SIZE,
                self.tr('Font size'),
                QgsProcessingParameterNumber.Integer,
                12,
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        sink, dest_id = self.parameterAsSink(
            parameters,
            self.OUTPUT,
            context,
            QgsFields(),
            QgsWkbTypes.Type.Polygon,
            QgsProject.instance().crs(),
        )

        current_extent = self.iface.mapCanvas().mapSettings().extent()
        center = tuple(current_extent.center())

        features = self.text_to_layer(
            parameters[self.INPUT_TEXT],
            self.font_families[parameters[self.FONT]],
            parameters[self.TEXT_SIZE],
            center
        )

        total = 100.0 / len(features)

        for i, feature in enumerate(features):
            if feedback.isCanceled():
                break
            sink.addFeature(feature, QgsFeatureSink.FastInsert)
            feedback.setProgress(int(i * total))

        return {
            self.OUTPUT: dest_id
        }

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Convert text to polygons'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return TextToPolygonAlgorithm(self.iface)

    @staticmethod
    def text_to_layer(
        text,
        font_family="Arial",
        font_size=100,
        origin=(0, 0),
        precision=100,
    ):
        font = QFont(font_family, font_size * precision)
        path = QPainterPath()
        path.addText(0, 0, font, text)

        polygons = []

        for spp in path.toSubpathPolygons():
            points = [QgsPointXY(origin[0] + point.x() / precision, origin[1] -point.y() / precision) for point in spp]
            if points:
                polygons.append(QgsGeometry.fromPolygonXY([points]))

        reconstructed_polygons = []
        used = set()

        for i, outer in enumerate(polygons):
            if i in used:
                continue
            shell = outer
            holes = []

            for j, inner in enumerate(polygons):
                if i == j or j in used:
                    continue
                if shell.contains(inner):
                    holes.append(inner.asPolygon()[0])
                    used.add(j)

            if holes:
                reconstructed_polygons.append(QgsGeometry.fromPolygonXY([shell.asPolygon()[0]] + holes))
            else:
                reconstructed_polygons.append(shell)

        features = []

        for geom in reconstructed_polygons:
            feature = QgsFeature()
            feature.setGeometry(geom)
            features.append(feature)

        return features